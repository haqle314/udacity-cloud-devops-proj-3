version: 2.1

commands:
  destroy-environment:
    description: Destroy cloudformation stacks on failure
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Destroy stacks
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow-id>>
            aws s3 rm s3://udapeople-<<parameters.workflow-id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow-id>>
  revert-migrations:
    description: Revert DB migrations
    parameters:
      workflow-id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            echo curl --insecure https://kvdb.io/Q6vQcCfxcJu4aGAtngn2qL/migration_<<parameters.workflow-id>>
            SUCCESS=$(curl --insecure https://kvdb.io/Q6vQcCfxcJu4aGAtngn2qL/migration_<<parameters.workflow-id>>)
            if [[ "$SUCCESS" == "1" ]];
            then
                cd backend
                npm install
                npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - persist_to_workspace:
          root: .
          paths: [frontend/dist]

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - persist_to_workspace:
          root: .
          paths: [backend/dist]
  test-frontend:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            exit 0

  scan-backend:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            exit 0

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum -y install tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            aws ec2 describe-instances \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text | tee -a .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths: [.circleci/ansible/inventory.txt]
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [96:28:df:43:60:f1:02:1b:02:59:97:13:09:7d:2a:37]
      - attach_workspace:
          at: .
      - run:
          command: cat .circleci/ansible/inventory.txt
      - run:
          name: Install deps
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: cimg/node:10.24
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            export NODE_TLS_REJECT_UNAUTHORIZED=0
            npm run migrations > migrations_dump.txt
      - run:
          name: check migrations
          command: |
            ls -l backend/migrations_dump.txt
            cat backend/migrations_dump.txt
      - run:
          name: Send migrations status to kv store
          command: |
            grep -q "has been executed successfully." backend/migrations_dump.txt \
                && curl https://kvdb.io/Q6vQcCfxcJu4aGAtngn2qL/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' \
                || true

  deploy-frontend:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install deps
          command: apk add --update nodejs-current npm curl && pip install awscli
      - run:
          name: Get backend URL
          command: |
            export BACKEND_IP=$(tail -n1 .circleci/ansible/inventory.txt)
            export API_URL="http://$BACKEND_IP:3030"
            touch frontend/.env
            echo API_URL=$API_URL | tee -a frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            export NODE_OPTIONS=--openssl-legacy-provider
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - persist_to_workspace:
          root: .
          paths: [frontend/.env]
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
  deploy-backend:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [96:28:df:43:60:f1:02:1b:02:59:97:13:09:7d:2a:37]
      - attach_workspace:
          at: .
      - run:
          name: Install deps
          command: apk add --update ansible nodejs npm curl && pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czf .circleci/ansible/artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of inventory.txt is"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
  smoke-test:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install deps
          command: apk add --update curl nodejs npm && pip install awscli
      - run:
          name: Backend smoke test
          command: |
            source frontend/.env
            curl -s $API_URL/api/status | grep ok
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo $URL
            curl -s $URL | grep -q Welcome
      - destroy-environment:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow-id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cloudfront-update:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - run:
          name: Install deps
          command: apk add --update nodejs npm curl && pip install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            OLD_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)
            
            aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name udapeople-prod \
                --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople
            
            echo "Old workflow ID: $OLD_WORKFLOW_ID"
            echo "New workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            echo "export OLD_WORKFLOW_ID=$OLD_WORKFLOW_ID" > old-workflow-id
      - persist_to_workspace:
          root: .
          paths: [old-workflow-id]
  cleanup:
    docker:
      - image: python:3.9-alpine
    steps:
      - checkout
      - run:
          name: Install deps
          command: pip install awscli
      - attach_workspace:
          at: .
      - run:
          name: Fetch old workflow ID
          command: |
            source old-workflow-id
            echo "Old workflow ID: $OLD_WORKFLOW_ID"
            echo "New workflow ID: ${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "$OLD_WORKFLOW_ID" != "${CIRCLE_WORKFLOW_ID:0:7}" ]]; then
                echo "Deleting previous cloudformation stacks"
                aws s3 rm "s3://udapeople-$OLD_WORKFLOW_ID" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-frontend-$OLD_WORKFLOW_ID"
                aws cloudformation delete-stack --stack-name "udapeople-backend-$OLD_WORKFLOW_ID"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [deploy-infrastructure]
      - deploy-backend:
          requires: [run-migrations, configure-infrastructure]
      - deploy-frontend:
          requires: [deploy-infrastructure]
      - smoke-test:
          requires: [deploy-frontend, deploy-backend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
